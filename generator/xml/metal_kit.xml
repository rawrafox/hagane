<framework module="metal_kit">
  <use>cocoa::*</use>
  <use>core_animation::*</use>
  <use>core_graphics::*</use>
  <use>foundation::*</use>
  <use>metal::*</use>
  <use>model_io::*</use>

  <extern framework="MetalKit" />

  <!-- Classes -->
  <class name="MTKMesh" inherits="NSObject">
    <!-- Initialization -->
    <initializer selector="initWithMesh:device:error:">
      <argument name="mesh" protocol="MDLMesh" />
      <argument name="device" protocol="MTLDevice" />
      <argument name="error" error="NSError" />
    </initializer>

    <!-- Loading Meshes from an Asset -->
    <!-- TODO: All missing -->

    <!-- Submeshes -->
    <property name="submeshes" protocol="NSArray" element="MTKSubmesh" read-only />

    <!-- Vertex Properties -->
    <property name="vertexBuffers" protocol="NSArray" element="MTKMeshBuffer" read-only />
    <property name="vertexCount" type="NSUInteger" read-only />
    <property name="vertexDescriptor" protocol="MDLVertexDescriptor" read-only />

    <!-- Identifying Properties -->
    <property name="name" protocol="NSString" />
  </class>

  <class name="MTKMeshBuffer" inherits="NSObject">
    <!-- Originating Objects -->
    <property name="allocator" protocol="MTKMeshBufferAllocator" read-only />
    <!-- TODO: <property name="zone" protocol="MDLMeshBufferZone" read-only /> -->
    <!-- TODO: <property name="type" protocol="MDLMeshBufferType" read-only /> -->

    <!-- Metal Buffer Properties -->
    <property name="buffer" protocol="MTLBuffer" read-only />
    <property name="length" type="NSUInteger" read-only />
    <property name="offset" type="NSUInteger" read-only />
  </class>

  <class name="MTKMeshBufferAllocator" inherits="MDLMeshBufferAllocator, NSObject">
    <!-- Initialization -->
    <initializer selector="initWithDevice:">
      <argument name="device" protocol="MTLDevice" />
    </initializer>

    <!-- Device -->
    <property name="device" protocol="MTLDevice" />
  </class>

  <class name="MTKSubmesh" inherits="MDLNamed, NSObject">
    <!-- Parent Mesh -->
    <property name="mesh" protocol="MTKMesh" weak read-only />

    <!-- Properties used to Draw Indexed Primitives -->
    <property name="indexBuffer" protocol="MTKMeshBuffer" read-only />
    <property name="indexCount" type="NSUInteger" read-only />
    <property name="indexType" type="MTLIndexType" read-only />
    <property name="primitiveType" type="MTLPrimitiveType" read-only />

    <!-- Identifying Properties -->
    <property name="name" protocol="NSString" />
  </class>

  <class name="MTKTextureLoader" inherits="NSObject">
    <!-- Creating a Texture Loader -->
    <initializer selector="initWithDevice:">
      <argument name="device" protocol="MTLDevice" />
    </initializer>

    <property name="device" protocol="MTLDevice" />

    <!-- Loading Textures from URLs -->
    <method selector="newTextureWithContentsOfURL:options:error:">
      <argument name="URL" protocol="NSURL" />
      <argument name="options" protocol="NSDictionary" element="NSString, NSObject" />
      <argument name="error" error="NSError" />
      <return protocol="MTLTexture" />
    </method>

    <!-- TODO: newTextureWithContentsOfURL:options:completionHandler: -->

    <method selector="newTexturesWithContentsOfURLs:options:error:">
      <argument name="URLs" protocol="NSArray" element="NSURL" />
      <argument name="options" protocol="NSDictionary" element="NSString, NSObject" />
      <argument name="error" error="NSError" />
      <return protocol="NSArray" element="MTLTexture" />
    </method>

    <!-- TODO: newTexturesWithContentsOfURLs:options:completionHandler: -->

    <!-- Loading Textures from Asset Catalogs -->
    <!-- TODO: All missing -->

    <!-- Loading Textures from CoreGraphics Images -->
    <!-- TODO: All missing -->

    <!-- Loading Textures from In-Memory Data Representations -->
    <method selector="newTextureWithData:options:error:">
      <argument name="data" protocol="NSData" />
      <argument name="options" protocol="NSDictionary" element="NSString, NSObject" />
      <argument name="error" error="NSError" />
      <return protocol="MTLTexture" />
    </method>

    <!-- TODO: newTextureWithData:options:completionHandler: -->

    <!-- Loading Textures from Model I/O Representations -->
    <method selector="newTextureWithMDLTexture:options:error:">
      <argument name="texture" protocol="MDLTexture" />
      <argument name="options" protocol="NSDictionary" element="NSString, NSObject" />
      <argument name="error" error="NSError" />
      <return protocol="MTLTexture" />
    </method>

    <!-- TODO: newTextureWithMDLTexture:options:completionHandler: -->
  </class>

  <class name="MTKView" inherits_mac="NSView" inherits_ios="UIView" inherits="NSObject">
    <!-- Initialization -->
    <initializer selector="initWithCoder:">
      <argument name="coder" protocol="NSCoder" />
    </initializer>

    <initializer selector="initWithFrame:device:">
      <argument name="frameRect" type="CGRect" />
      <argument name="device" protocol="MTLDevice" />
    </initializer>

    <!-- Delegate -->
    <property name="delegate" protocol="MTKViewDelegate" />

    <!-- Device -->
    <property name="device" protocol="MTLDevice" />

    <!-- Configuring the Render Target Properties -->
    <property name="clearColor" type="MTLClearColor" />
    <property name="clearDepth" type="f64" />
    <property name="clearStencil" type="u32" />
    <property name="colorPixelFormat" type="MTLPixelFormat" />
    <property name="depthStencilPixelFormat" type="MTLPixelFormat" />
    <property name="sampleCount" type="NSUInteger" />

    <!-- Generated Render Target Objects -->
    <property name="currentRenderPassDescriptor" protocol="MTLRenderPassDescriptor" read-only />
    <property name="depthStencilTexture" protocol="MTLTexture" read-only />
    <property name="multisampleColorTexture" protocol="MTLTexture" read-only />

    <!-- Configuring and Querying the Frame Rate -->
    <property name="preferredFramesPerSecond" type="NSInteger" />

    <!-- Controlling Frame Updates -->
    <property name="paused" getter="isPaused" type="bool" />

    <!-- Drawing Your View’s Contents -->
    <property name="enableSetNeedsDisplay" type="bool" />
    <method selector="draw" />

    <!-- Managing Your Render Target -->
    <property name="autoResizeDrawable" type="bool" />
    <property name="currentDrawable" protocol="CAMetalDrawable" read-only />
    <property name="drawableSize" type="CGSize" />
    <property name="framebufferOnly" type="bool" />
    <property name="presentsWithTransaction" type="bool" />
    <method selector="releaseDrawables" />

    <!-- Instance Properties -->
    <object-property name="colorspace" type="CGColorSpaceRef" />
  </class>

  <protocol name="MTKViewDelegate" inherits="NSObject">
    <!-- Changing the View’s Layout -->
    <method selector="mtkView:drawableSizeWillChange:">
      <argument name="view" protocol="MTKView" />
      <argument name="size" type="CGSize" />
    </method>

    <!-- Drawing the View’s Contents -->
    <method selector="drawInMTKView:">
      <argument name="view" protocol="MTKView" />
    </method>
  </protocol>
</framework>